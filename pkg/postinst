#!/bin/bash
# postinst script for mirrorcommandline
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see https://www.debian.org/doc/debian-policy/ or
# the debian-policy package


case "$1" in
    configure)
        export PATH=$PATH:/usr/local/bin
        [ -d /usr/local ] || mkdir /usr/local
        [ -d /usr/local/bin ] || mkdir /usr/local/bin
        cd /usr/local/bin
        MM="/usr/local/MagicMirror"
        for command in ${MM}/bin/*
        do
            b=`basename ${command}`
            [ -f $b ] || ln -s ${command} .
        done
        [ -d ${MM}/pics ] || mkdir ${MM}/pics
        cd ${MM}/pics
        inst=`type -p pip`
        [ "${inst}" ] || sudo apt-get install python-pip
        pip list | grep -F tqdm > /dev/null || {
            pip install tqdm
        }
        [ -x ${MM}/bin/getimages ] && {
            ${MM}/bin/getimages
            [ -f images.tar.gz ] && {
                tar xzf images.tar.gz
                rm -f images.tar.gz
            }
        }
        MMHOME=/home/pi/MagicMirror
        [ -d ${MMHOME}/config ] || {
            MMHOME=
            for homedir in /home/*
            do
                [ "${homedir}" == "/home/*" ] && continue
                [ -d ${homedir}/MagicMirror/config ] && {
                    MMHOME="${homedir}/MagicMirror"
                    break
                }
            done
        }
        if [ "${MMHOME}" ]
        then
            cd "${MMHOME}/config"
            USER=$(stat -c '%U' ${MMHOME}/config)
            GROUP=$(stat -c '%G' ${MMHOME}/config)
            chown -R ${USER}:${GROUP} ${MM}
            for config in ${MM}/config/*
            do
                b=`basename ${config}`
                [ -f $b ] || [ -d $b ] || sudo -u ${USER} ln -s ${config} .
            done
            [ -d "${MMHOME}/css" ] && {
              cd "${MMHOME}/css"
              for css in ${MM}/css/*
              do
                b=`basename ${css}`
                if [ "$b" == "custom.css" ]
                then
                    if [ -f $b ]
                    then
                        [ -f custom-mirrorcommandline.css ] || {
                            sudo -u ${USER} ln -s ${css} custom-mirrorcommandline.css
                        }
                    else
                        sudo -u ${USER} ln -s ${css} .
                    fi
                else
                    [ -f $b ] || [ -d $b ] || sudo -u ${USER} ln -s ${css} .
                fi
              done
            }
            [ -d "${MMHOME}/modules" ] && {
              cd "${MMHOME}/modules"
              USER=$(stat -c '%U' ${MMHOME}/modules)
              [ -d MMM-BackgroundSlideshow ] || {
                inst=`type -p git`
                [ "${inst}" ] && {
                  sudo -u ${USER} git clone https://github.com/darickc/MMM-BackgroundSlideshow.git
                }
              }
              [ -d MMM-BackgroundSlideshow ] && {
                cd MMM-BackgroundSlideshow
                inst=`type -p npm`
                [ "${inst}" ] && sudo -u ${USER} npm install
                [ -d pics ] || sudo -u ${USER} mkdir pics
                [ -d ${MM}/pics ] && {
                  cd pics
                  for dir in Art Fractals Gif Owls Waterfall
                  do
                    [ -d ${MM}/pics/${dir} ] && {
                      [ -L ${dir} ] || [ -d ${dir} ] || {
                        sudo -u ${USER} ln -s ${MM}/pics/${dir} ${dir}
                      }
                    }
                  done
                }
              }
            }
        else
            echo "Unable to locate MagicMirror installation folder."
            echo "MirrorCommandLine config and css files in ${MM}"
            echo "have not been linked into the MagicMirror installation folder."
            echo "This must be accomplished manually."
        fi
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

exit 0
