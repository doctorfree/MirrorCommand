#!/bin/bash
# postinst script for mirrorcommandline
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see https://www.debian.org/doc/debian-policy/ or
# the debian-policy package


case "$1" in
    configure)
        export PATH=/usr/local/bin:$PATH
        # Scripts for which links will be made in /usr/local/bin
        EXPORTS="camsnap chkconfig chktemp gethue getquote screensaveroff \
            get_temps mirror mknewartist mknewmodel mknewphotographer \
            mknewplayboy mknewtop mm mmapiactions mmgetb mmscene mmsetb mmupdall \
            module_update module_update_all play rand_back send_sms showkeys \
            updallartists updallmodels updallphotographers updalltop updarpscan \
            updartist updlinks updmodel updphotographer updtop vncview vol \
            websnap wireless_conf zerologs"
        LOCAL="myreboot myshutdown remountusb"
        KEYS="/usr/local/MirrorCommandLine/etc/mirrorkeys"

        [ -d /usr/local ] || mkdir /usr/local
        [ -d /usr/local/bin ] || mkdir /usr/local/bin
        cd /usr/local/bin
        MM="/usr/local/MirrorCommandLine"
        [ -f ${MM}/etc/mirror_start.sh ] && {
          [ -f mirror_start ] || ln -s ${MM}/etc/mirror_start.sh mirror_start
        }
        # This fails but why
        # inst_vcgencmd=`type -p vcgencmd`
        # [ "${inst_vcgencmd}" ] || {
        #     [ -f vcgencmd ] || ln -s ${MM}/bin/vcgencmd vcgencmd
        # }
        for command in ${EXPORTS}
        do
          [ -f ${MM}/bin/${command} ] && {
            [ -f ${command} ] || ln -s ${MM}/bin/${command} .
          }
        done
        for command in ${LOCAL}
        do
          [ -f ${MM}/bin/${command} ] && {
            [ -f /usr/bin/${command} ] || {
              cp ${MM}/bin/${command} /usr/bin/${command}
              chmod 755 /usr/bin/${command}
            }
            if [ "${command}" == "remountusb" ]
            then
              [ -f ${command} ] || ln -s /usr/bin/${command} .
            else
              localcomm=`echo ${command} | sed -e "s/my//"`
              [ -f ${localcomm} ] || ln -s /usr/bin/${command} ${localcomm}
            fi
          }
        done
        MMHOME=/home/pi/MagicMirror
        [ -d ${MMHOME}/config ] || {
            MMHOME=
            for homedir in /usr/local /home/*
            do
                [ "${homedir}" == "/home/*" ] && continue
                [ -d ${homedir}/MagicMirror/config ] && {
                    MMHOME="${homedir}/MagicMirror"
                    break
                }
            done
        }
        if [ "${MMHOME}" ]
        then
            USER=$(stat -c '%U' ${MMHOME}/config)
            GROUP=$(stat -c '%G' ${MMHOME}/config)
            chown -R ${USER}:${GROUP} ${MM}
            cat ${MM}/bin/mirror | sed -e "s,__MagicMirror_Home__,${MMHOME}," > /tmp/mmhome$$
            cp /tmp/mmhome$$ ${MM}/bin/mirror
            rm -f /tmp/mmhome$$
            for remote in vncview mm
            do
              cat ${MM}/bin/${remote} | sed -e "s,__MagicMirror_User__,${USER}," > /tmp/${remote}$$
              cp /tmp/${remote}$$ ${MM}/bin/${remote}
              rm -f /tmp/${remote}$$
            done
            for cfg in config config-notelegram
            do
              [ -d "${MMHOME}/${cfg}" ] || {
                sudo -u ${USER} mkdir "${MMHOME}/${cfg}"
              }
              cd "${MMHOME}/${cfg}"
              for config in ${MM}/${cfg}/*
              do
                [ "${config}" == "${MM}/${cfg}/*" ] && continue
                b=`basename ${config}`
                [ -d ${config} ] && {
                  [ -d $b ] || sudo -u ${USER} mkdir $b
                  cd $b
                  for subconf in ${config}/*
                  do
                    [ "${subconf}" == "${config}/*" ] && continue
                    c=`basename ${subconf}`
                    [ -f $c ] || sudo -u ${USER} cp ${subconf} .
                  done
                  cd ..
                  continue
                }
                [ -f $b ] || sudo -u ${USER} cp ${config} .
              done
            done
            [ -d "${MMHOME}/css" ] && {
              cd "${MMHOME}/css"
              for css in ${MM}/css/*
              do
                [ "${css}" == "${MM}/css/*" ] && continue
                b=`basename ${css}`
                if [ "$b" == "custom.css" ]
                then
                    if [ -f $b ]
                    then
                        [ -f custom-mirrorcommandline.css ] || {
                            sudo -u ${USER} cp ${css} custom-mirrorcommandline.css
                        }
                    else
                        sudo -u ${USER} cp ${css} .
                    fi
                else
                    [ -f $b ] || [ -d $b ] || sudo -u ${USER} cp ${css} .
                fi
              done
            }
            # Fixup the ARP Scan devices used by MMM-MacAddressScan module
            inst_arpscan=`type -p arp-scan`
            [ "${inst_arpscan}" ] && {
              [ -x ${MM}/bin/arps2mm ] && ${MM}/bin/arps2mm > ${MM}/etc/arp-devices.js
              [ -x ${MM}/bin/arpscanconf ] && {
                cd "${MMHOME}/config"
                ${MM}/bin/arpscanconf
                cd "${MMHOME}/config-notelegram"
                ${MM}/bin/arpscanconf
              }
            }
            # Copy default keyless config
            cd "${MMHOME}/config"
            rm -f config.js
            if [ -f config-nokeys.js ]
            then
                sudo -u ${USER} ln -s config-nokeys.js config.js
            else
                sudo -u ${USER} cp config.js.sample config.js
            fi
            # Install MagicMirror 3rd Party modules used by MirrorCommandLine
            MODULES="internet-monitor MMM-BackgroundSlideshow MMM-CoinMarketCap \
                     MMM-COVID19-SPARKLINE MMM-DarkSkyForecast MMM-DateOnly \
                     MMM-Detector MMM-GoogleAssistant MMM-GoogleMapsTraffic \
                     mmm-hue-lights MMM-iFrame MMM-InstagramView \
                     MMM-IronManGIF MMM-MacAddressScan MMM-MyScoreboard \
                     MMM-pages MMM-RAIN-RADAR MMM-Remote-Control \
                     MMM-Scenes MMM-Selfieshot MMM-Solar \
                     MMM-stocks MMM-TelegramBot MMM-TelegramCommands \
                     MMM-Tools MMM-Videoplayer MMM-YouTubeWebView"
            for module in ${MODULES}
            do
              [ -d "${MMHOME}/modules/${module}" ] || {
                [ -x "${MM}/bin/module_update" ] && {
                  echo "Installing MagicMirror module: ${module}"
                  sudo -u ${USER} ${MM}/bin/module_update -q -i ${module}
                }
              }
            done
            # Copy any installed MirrorCommandLine Google Assistant recipes
            # If any recipe of the same name already exists, do not overwrite
            RECIPE_DIR="modules/MMM-GoogleAssistant/recipes"
            [ -d "${MMHOME}/${RECIPE_DIR}" ] && {
              cd "${MMHOME}/${RECIPE_DIR}"
              for recipe in ${MM}/${RECIPE_DIR}/*
              do
                [ "${recipe}" == "${MM}/${RECIPE_DIR}/*" ] && continue
                b=`basename ${recipe}`
                if [ -f $b ]
                then
                  mcl=`echo $b | sed -e "s/\.js//"`
                  [ -f ${mcl}-mcl.js ] || {
                    sudo -u ${USER} cp ${recipe} ${mcl}-mcl.js
                  }
                else
                  sudo -u ${USER} cp ${recipe} .
                fi
              done
            }
        else
            echo "Unable to locate MagicMirror installation folder."
            echo "MirrorCommandLine config and css files in ${MM}"
            echo "have not been linked into the MagicMirror installation folder."
            echo "This must be accomplished manually."
        fi
        MMIP=`hostname -I | awk ' { print $1 } '`
        [ "${MMIP}" ] && {
            cat ${KEYS} | sed -e "s/keys\[MMIP\]=/keys\[MMIP\]=\'${MMIP}\'/" > /tmp/keys$$
            cp /tmp/keys$$ ${KEYS}
            rm -f /tmp/keys$$
            /usr/local/MirrorCommandLine/bin/showkeys -q
        }
        [ "${MMHOME}" ] && {
            # Setup PM2 if not already configured
            inst_pm2=`type -p pm2`
            [ "${inst_pm2}" ] || npm install pm2@latest -g > /dev/null 2>&1
            inst_pm2=`type -p pm2`
            [ "${inst_pm2}" ] && {
                sudo -u ${USER} pm2 list | grep MagicMirror > /dev/null && {
                  sudo -u ${USER} pm2 --silent describe MagicMirror && {
                    sudo -u ${USER} pm2 --silent delete MagicMirror
                  }
                }
                echo "Starting MagicMirror via pm2"
                sudo -u ${USER} pm2 --silent start ${MM}/etc/magicmirror.config.js
                # Tell pm2 to save that configuration, for start at boot
                echo "Saving MagicMirror pm2 configuration"
                sudo -u ${USER} pm2 --silent save
                echo "Stopping MagicMirror via pm2"
                sudo -u ${USER} pm2 --silent stop MagicMirror
                echo "Generating PM2 startup script"
                pm2_startup=`sudo -u ${USER} pm2 startup | tail -n 1`
                # Check to see if we can get the OS package name (Ubuntu)
                if [ $(which lsb_release| wc -l) >0 ]; then
                  # On Ubuntu 18.04, pm2 startup gets something wrong
                  if [ $(lsb_release  -r | grep -m1 18.04 | wc -l) > 0 ]; then
                    pm2_startup=$(echo ${pm2_startup} | sed 's/\/bin/\/bin:\/bin/')
                  fi
                fi
                ${pm2_startup} > /dev/null 2>&1
            }
            echo "Done"
        }
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

exit 0
