#!/bin/bash
# prerm script for mirrorcommandline
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <prerm> `remove'
#        * <old-prerm> `upgrade' <new-version>
#        * <new-prerm> `failed-upgrade' <old-version>
#        * <conflictor's-prerm> `remove' `in-favour' <package> <new-version>
#        * <deconfigured's-prerm> `deconfigure' `in-favour'
#          <package-being-installed> <version> `removing'
#          <conflicting-package> <version>
# for details, see https://www.debian.org/doc/debian-policy/ or
# the debian-policy package


case "$1" in
    remove|upgrade|deconfigure)
        MM="/usr/local/MirrorCommandLine"
        MNTS="myreboot myshutdown remountusb"
        [ -d /usr/local/bin ] && {
            cd /usr/local/bin
            rm -f mirror_start vcgencmd
            for command in ${MM}/bin/*
            do
                [ "${command}" == "${MM}/bin/*" ] && continue
                b=`basename ${command}`
                [ -L $b ] && {
                    readlink $b | grep ${MM} > /dev/null && rm -f $b
                }
            done
        }
        for command in ${MNTS}
        do
            rm -f /usr/bin/${command}
            if [ "${command}" == "remountusb" ]
            then
              rm -f /usr/local/bin/${command}
            else
              localcomm=`echo ${command} | sed -e "s/my//"`
              rm -f /usr/local/bin/${localcomm}
            fi
        done
        MMHOME=/home/pi/MagicMirror
        [ -d ${MMHOME}/config ] || {
            MMHOME=
            for homedir in /usr/local /home/*
            do
                [ "${homedir}" == "/home/*" ] && continue
                [ -d ${homedir}/MagicMirror/config ] && {
                    MMHOME="${homedir}/MagicMirror"
                    break
                }
            done
        }
        USER=
        if [ "${MMHOME}" ]
        then
            [ -d "${MMHOME}/config" ] || continue
            USER=$(stat -c '%U' ${MMHOME}/config)
            cd "${MMHOME}/config"
            readlink config.js | grep config- > /dev/null && {
                [ -f config.js.sample ] && {
                    rm -f config.js
                    cp config.js.sample config.js
                    chown ${USER} config.js
                }
            }
            cd "${MMHOME}"
            for config in ${MM}/config/* \
                          ${MM}/config-notelegram/* \
                          ${MM}/config-landscape/* \
                          ${MM}/config-landscape-notelegram/*
            do
              [ "${config}" == "${MM}/config/*" ] && continue
              [ "${config}" == "${MM}/config-notelegram/*" ] && continue
              [ "${config}" == "${MM}/config-landscape/*" ] && continue
              [ "${config}" == "${MM}/config-landscape-notelegram/*" ] && continue
              b=`basename ${config}`
              d=`dirname ${config}`
              e=`basename ${d}`
              [ -d ${e}/$b ] && {
                  cd ${e}/$b
                  for subconf in ${MM}/$e/$b/*
                  do
                      [ "${subconf}" == "${MM}/$e/$b/*" ] && continue
                      c=`basename ${subconf}`
                      rm -f $c
                  done
                  cd "${MMHOME}"
                  rmdir --ignore-fail-on-non-empty $e/$b
              }
              rm -f $e/$b
            done
            rmdir --ignore-fail-on-non-empty ${MMHOME}/config-landscape
            rmdir --ignore-fail-on-non-empty ${MMHOME}/config-notelegram
            rmdir --ignore-fail-on-non-empty ${MMHOME}/config-landscape-notelegram
            [ -d "${MMHOME}/css" ] && {
              cd "${MMHOME}/css"
              for css in ${MM}/css/*
              do
                [ "${css}" == "${MM}/css/*" ] && continue
                b=`basename ${css}`
                [ "$b" == "custom.css" ] || rm -f $b
              done
            }

            RECIPE_DIR="modules/MMM-GoogleAssistant/recipes"
            [ -d "${MMHOME}/${RECIPE_DIR}" ] && {
              cd "${MMHOME}/${RECIPE_DIR}"
              for recipe in ${MM}/${RECIPE_DIR}/*
              do
                [ "${recipe}" == "${MM}/${RECIPE_DIR}/*" ] && continue
                b=`basename ${recipe}`
                c=`echo $b | sed -e "s/\.js//"`
                if [ -f ${c}-mcl.js ]
                then
                    rm -f ${c}-mcl.js
                else
                    rm -f $b
                fi
              done
            }
            VIDEO_DIR="modules/MMM-Videoplayer"
            [ -d "${MMHOME}/${VIDEO_DIR}" ] && {
              cd "${MMHOME}/${VIDEO_DIR}"
              [ -L movies ] && rm -f movies
            }
        else
            echo "Unable to locate MagicMirror installation folder."
            echo "MirrorCommandLine config and css files in ${MM}"
            echo "have not been unlinked in the MagicMirror installation folder."
            echo "This must be accomplished manually."
        fi
        # Delete asound-conf system service
        # ASND_SVC="/etc/systemd/system/asound-conf.service"
        # [ -f ${ASND_SVC} ] && {
        #   systemctl disable asound-conf
        #   rm -f ${ASND_SVC}
        # }
        rm -f ${MM}/etc/*arp-devices*.js
        rm -f ${MM}/etc/mirrorscreen
        rm -f ${MMHOME}/.mirrorscreen*
        [ "${USER}" ] && {
          sudo -u ${USER} pm2 list | grep MagicMirror > /dev/null && {
            sudo -u ${USER} pm2 --silent describe MagicMirror && {
              sudo -u ${USER} pm2 --silent delete MagicMirror
              sudo -u ${USER} pm2 --silent save
            }
          }
        }
        # Delete MagicMirror symlinks in home dirs if we put them there
        [ "${MMHOME}" == "/usr/local/MagicMirror" ] && {
          for userhome in /home/*
          do
            [ "${userhome}" == "/home/*" ] && continue
            MMUSER="${userhome}/MagicMirror"
            [ -L "${MMUSER}" ] && {
              readlink "${MMUSER}" | grep ${MMHOME} > /dev/null && {
                rm -f "${MMUSER}"
              }
            }
          done
        }
    ;;

    failed-upgrade)
    ;;

    *)
        echo "prerm called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

exit 0
